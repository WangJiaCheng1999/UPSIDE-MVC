@using MvcTest.wwwroot.cSharpFunction

@{
    ViewData["Title"] = "DataPage";

}
<style>
    .arc text {
        font: 16px arial;
        text-anchor: middle;
    }

    .arc path {
        stroke: #fff;
    }

    .title {
        font: 20px arial;
        fill: darkblue;
        font-weight: bold;
    }

    .line {
        fill: none;
        stroke: blueviolet;
        stroke-width: 3px;
    }

    .bar {
        fill: lightblue;
    }

    .highlight {
        fill: red;
    }

    .title {
        fill: blue;
        font-weight: bold;
    }

    svg rect {
        fill: steelblue;
    }

    svg text {
        fill: black;
        font: 12px sans-serif;
        text-anchor: end;
    }
</style>

<div class="row justify-content-start" id="DataPageSelectors">
    <div class="col-6">
        File Name  <select id="RoundSelector"></select>
    </div>

</div>
<script>


</script>


<script type="text/javascript" src="https://d3js.org/d3.v4.min.js?ver<%=DateTime.Now.Ticks.ToString()%>"></script>

<svg width="100" height="500" id="svg5" class="svgs"></svg>
<svg width="500" height="500" id="svg10" class="svgs"></svg>
<svg width="100" height="500" id="svg11" class="svgs"></svg>
<svg width="500" height="500" id="svg20" class="svgs"></svg>
<svg width="100" height="500" id="svg21" class="svgs"></svg>
<svg width="600" height="500" id="svg30" class="svgs"></svg>

<script>

    let fileCount = @FileCounter.GetFilesCount("wwwroot/JData");
    let roundSelected = 0;

    var itemCount10 = 0;
    var pie_item1_count = 0;
    var pie_item2_count = 0;
    var pie_item3_count = 0;

    var pie_item1 = "Local";                                                // show in pie chart
    var pie_item2 = "Global";                                               
    var pie_item3 = "Neither";                                              

    //Add options into the selector
    for (let i = 1; i <= fileCount; i++){
        let option = "Round" + i;
        $('#RoundSelector').append(`<option value="${option}">${option} </option>`);
    }


    //Get what options that user selected and show the data based on that
    $("#RoundSelector").change(function (round) {

                 let options = $("#RoundSelector option:selected");
                 roundSelected = options.val() + ".json";

                 // Clear svg and show pie chart
                 if ($("#svg10").html() !== null) {
                       $("#svg10").html("");
                 }
                 PieInit(500, 500, pie_item1, pie_item2, pie_item3, "/JData/" + roundSelected, "#svg20");

                 // Clear svg and show bar chart
                 if ($("#svg20").html() !== null) {
                       $("#svg20").html("");
                 }
                 BarInit(width01, height01, padding01, rectHeight, rectPadding, "/JData/" + roundSelected, "#svg10");

                 // Clear svg and show sortbar chart
                 if ($("#svg30").html() !== null) {
                      $("#svg30").html("");
                 }
                 SortBar(width, height, margin, innerWidth, innerHeight, xText, topText, "/JData/" + roundSelected, "#svg30");

                 console.log(roundSelected);
             });

 
    if (roundSelected === 0){
           roundSelected = "Round1";
    }

    //var filename = "/JData/" + roundSelected + ".json";
    var filename = "/JData/Round1.json";                    // initial with Round1,json

    PieInit(500, 500, pie_item1, pie_item2, pie_item3, filename, "#svg20");

    function PieInit(width10, height10, pie_item1, pie_item2, pie_item3, filename, svg_id) {
        d3.json(filename, function (error, data10) {
            console.log("data10.length=" + data10.length);
            if (error) {
                throw error;
            }

            pie_item1_count = parseInt(data10.filter((res) => { return res.ImageType == pie_item1 }).length);
            pie_item2_count = parseInt(data10.filter((res) => { return res.ImageType == pie_item2 }).length);
            pie_item3_count = parseInt(data10.filter((res) => { return res.ImageType == pie_item3 }).length);
            console.log(pie_item1 + "=" + pie_item1_count + ", " + pie_item2 + "=" + pie_item2_count + ", " + pie_item3 + "=" + pie_item3_count);

            var dataset = [[pie_item1, pie_item1_count], [pie_item2, pie_item2_count], [pie_item3, pie_item3_count]];
            var pie = d3.pie()
                .sort(null)
                .value(function (d) {
                    return d[1];
                });
            var piedata = pie(dataset);

            var outerRadius10 = width10 / 5;
            var innerRadius10 = width10 / 20;

            var arc = d3.arc()
                .outerRadius(outerRadius10)
                .innerRadius(innerRadius10);

            var colors = d3.schemeCategory20;

            var svg10 = d3.select(svg_id)
                .append('svg')
                .attr('width', width10)
                .attr('height', height10);

            var arcs = svg10.selectAll('g')
                .data(piedata)
                .enter()
                .append('g')
                .attr('transform', 'translate(' + (width10 / 2+10) + ',' + height10 / 2 + ')');

            arcs.append('path')
                .attr('fill', function (d, i) {
                    return colors[i];                  
                })
                .attr('d', function (d) {
                    return arc(d);
                });

            arcs.append('text')
                .attr('transform', function (d, i) {
                    var x10 = arc.centroid(d)[0] * 2.5;    
                    var y10 = arc.centroid(d)[1] * 2.5;    
                    if (i === 4) {
                        return 'translate(' + (x10 * 1.2) + ', ' + (y10 * 1.2) + ')';
                    } else if (i === 3) {
                        return 'translate(' + (x10 - 40) + ', ' + y10 + ')';
                    } else if (i === 5) {
                        return 'translate(' + (x10 + 40) + ', ' + y10 + ')';
                    }
                    return 'translate(' + x10 + ', ' + y10 + ')';
                })
                .attr('text-anchor', 'middle')
                .style("font-size", "16px")
                .attr("stroke", "blue")
                .text(function (d) {
                    var percent = Number(d.value) / d3.sum(dataset, function (d) {
                        return d[1];
                    }) * 100;
                    return d.data[0] + ' ' + percent.toFixed(1) + '%';
                })

            arcs.append('line')
                .attr('stroke', 'black')
                .attr('x1', function (d) { return arc.centroid(d)[0] * 1.65; })     
                .attr('y1', function (d) { return arc.centroid(d)[1] * 1.65; })    
                .attr('x2', function (d, i) {
                    if (i === 4) {
                        return arc.centroid(d)[0] * 3.2;
                    }
                    return arc.centroid(d)[0] * 2.5;
                })
                .attr('y2', function (d, i) {
                    if (i === 4) {
                        return arc.centroid(d)[1] * 3.2;
                    }
                    return arc.centroid(d)[1] * 2.5;
                });
        });
    }

</script>

<script>

    var padding01 = {
        top: 50,
        right: 50,
        bottom: 30,
        left: 50
    };
    var width01 = 500 - padding01.left - padding01.right;
    var height01 = 500 - padding01.top - padding01.bottom;
    var rectHeight = 25;
    var rectPadding = 4;

    BarInit(width01, height01, padding01, rectHeight, rectPadding, filename, "#svg10");

    function BarInit(width01, height01, padding01, rectHeight, rectPadding, filename, svg_id) {

        d3.json(filename, function (error, data01) {
            if (error) throw error;

            data01.forEach(function (d) {
                d.Round = d.Round;
                d.TimeUse = +d.TimeUse;
            });

            // get X data
            var Xdatas = data01.map(function (d) {
                return d.Round;
            });

            // get Y data
            var values = data01.map(function (d) {
                return d.TimeUse;
            });

            // create xScale & yScale
            var xScale = d3.scaleBand().domain(Xdatas).rangeRound([0, width01]).padding(0.1),
                yScale = d3.scaleLinear().domain([0, d3.max(values)]).rangeRound([height01, 0]);

            var svg01 = d3.select(svg_id)
                .attr('width', width01 + padding01.left + padding01.right)
                .attr('height', height01 + padding01.top + padding01.bottom);

            // append group to svg
            var g = svg01.append('g')
                .attr('transform', 'translate(' + padding01.left + ',' + padding01.top + ')');

            // add Title
            //g.attr('class', 'headerText')
            //    .append('text')
            //    .attr('transform', 'translate(' + (width01 / 2) + ',' + (-padding01.top / 2) + ')')
            //    .attr('text-anchor', 'middle')
            //    .attr('font-weight', 300)
            //    .text('Round-Time Bar Chart')
            //    .attr('font-size', '3em');          

            // add X axis
            g.append('g')
                .attr('class', 'axisX')
                .attr('transform', 'translate(0,' + height01 + ')')
                .call(d3.axisBottom(xScale))
                .attr('font-weight', 'bold');

            // add Y axis
            g.append('g')
                .attr('class', 'axisY')
                .call(d3.axisLeft(yScale).ticks(10));

            // create chart for rect
            var chart = g.selectAll('.bar')
                .data(data01)
                .enter().append('g');

            // add rects
            chart.append('rect')
                .attr('class', 'bar')
                .attr('x', function (d) {
                    return xScale(d.Round);
                })
                //start animatoion
                .attr("y", function (d) {
                    var min = yScale.domain()[0];
                    return yScale(min);
                })
                .attr("height", function (d) {
                    return 0;
                })
                .transition()
                .delay(function (d, i) {
                    return i * 200;
                })
                .duration(2000)
                .ease(d3.easeBounceIn)

                //animation finish
                .attr('y', function (d) {
                    return yScale(d.TimeUse);
                })
                .attr('height', function (d) {
                    return height01 - yScale(d.TimeUse);
                })
                .attr('width', xScale.bandwidth());

            // add text to rects
            chart.append('text')
                .attr('class', 'barText')
                .attr('x', function (d) {
                    return xScale(d.Round);
                })
                //start animation
                .attr("y", function (d) {
                    var min = yScale.domain()[0];
                    return yScale(min);
                })
                .attr("height", function (d) {
                    return 0;
                })
                .transition()
                .delay(function (d, i) {
                    return i * 200;
                })
                .duration(1000)
                .ease(d3.easeBounceIn)

                //animation finish
                .attr('y', function (d) {
                    return yScale(d.TimeUse);
                })
                .attr('dx', xScale.bandwidth() / 2 + 10)        //+10 make text middle
                .attr('dy', 20)
                .attr('text-anchor', 'middle')
                .text(function (d) {
                    console.log("d.TimeUse", d.TimeUse)
                    return d.TimeUse;
                });

            // add mouseover event
            chart.on('mouseover', function (d) {
                d3.select(this).attr('opacity', 0.7);
            })
                .on('mouseout', function (d) {
                    d3.select(this)
                        .transition()
                        .duration(500)
                        .attr('opacity', 1)
                });
        });
    }
</script>

<script>
    var svg30 = d3.select('#svg30');
    var width = +svg30.attr('width');
    var height = +svg30.attr('height');
    var margin = { top: 60, right: 30, bottom: 60, left: 150 };
    var innerWidth = width - margin.left - margin.right;
    var innerHeight = height - margin.top - margin.bottom;
    var xValue = (datum) => { return datum.TimeUse };
    var yValue = (datum) => { return datum.Round };
    var xText = "Time Used";
    var topText = "Speed Ranking";

    SortBar(width, height, margin, innerWidth, innerHeight, xText, topText, filename, "#svg30");

    function SortBar(width, heigth, margin, innerWidth, innerHeight, xText, topText, filename, svg_id) {
        d3.json(filename, function (dataset) {
            dataset.forEach(datum => {
                datum.TimeUse = +(datum.TimeUse);
            });

            //Sort the dataset by ascending order
            dataset = dataset.sort((a, b) => {
                return d3.ascending(+a.TimeUse, +b.TimeUse)
            });

            console.log(dataset);
            console.log(dataset.map((datum) => { return datum.Round; }))
            ascendingBar(dataset, xText, topText);
        });
    }

    function ascendingBar(data, xText, topText) {

        // Linear Scale: Data Space -> Screen Space;
        var xScale = d3.scaleLinear()
            .domain([0, d3.max(data, xValue)])
            .range([0, innerWidth]);

        // Introducing y-Scale;
        var yScale = d3.scaleBand()
            .domain(data.map(yValue))
            .range([0, innerHeight])
            .padding(0.1);

        // Transform to (left,top)
        var g = svg30.append('g')
            .attr('transform', `translate(${margin.left}, ${margin.top})`);

        // data join with enter()
        g.selectAll('rect')
            .data(data)
            .enter()
            .append('rect')
            .attr('y', datum => yScale(yValue(datum)))
            .attr('width', (datum) => { return xScale(xValue(datum)) }) 
            .attr('height', yScale.bandwidth())
            .attr('fill', 'steelblue')

        // Adding axes;
        var yAxis = d3.axisLeft(yScale);
        var xAxis = d3.axisBottom(xScale)
            .tickFormat(d3.format(''))             //format('') show original number
            .tickSize(-innerHeight);
        let yAxisGroup = g.append('g').call(yAxis);
        yAxisGroup.selectAll('.domain, .tick line').remove();
        let xAxisGroup = g.append('g').call(xAxis)
            .attr('transform', `translate(${0}, ${innerHeight})`);

        xAxisGroup.append('text')
            .attr('y', 50)
            .attr('x', innerWidth / 2)
            .attr('fill', 'black').text(xText)
            .attr('id', 'TimeUse');

        xAxisGroup.selectAll('.domain').remove();

        // Adding a title;
        g.append('text')
            .text(topText)
            .attr('y', -10)
            .attr('x', 80);
    }

</script>








