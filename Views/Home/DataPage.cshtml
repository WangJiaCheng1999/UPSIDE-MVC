@using MvcTest.wwwroot.cSharpFunction

@{
    ViewData["Title"] = "DataPage";

}

<link href="~/css/DataPage.css" rel="stylesheet" />
<div class="justify-content-start" style=" position: relative center" id="DataPageSelectors">
    <div >
        Selected File Name You Want To View  <select id="RoundSelector"></select>
    </div>

</div>
<script type="text/javascript" src="https://d3js.org/d3.v4.min.js?ver<%=DateTime.Now.Ticks.ToString()%>"></script>
<div class="row">
    <div class="column">
        <svg width="500" height="500" id="svg10"></svg>
    </div>

    <div class="column">
        <svg width="500" height="500" id="svg20"></svg>
    </div>

    <div class="column">
        <svg width="600" height="500" id="svg30" class="svgs"></svg>
    </div>
</div>
<svg width="100" height="500" id="svg5" class="svgs"></svg>
<svg width="500" height="500" id="svg10" class="svgs"></svg>
<svg width="100" height="500" id="svg15" class="svgs"></svg>
<svg width="500" height="500" id="svg20" class="svgs"></svg>
<svg width="100" height="500" id="svg25" class="svgs"></svg>
<svg width="600" height="500" id="svg30" class="svgs"></svg>

<!--svg width="500" height="500" id="svg11"></svg-->
<script>

    let fileCount = @FileCounter.GetFilesCount("wwwroot/JData");        //file count
    let roundSelected = 0;                                              //initial round

    var svg10 = d3.select('#svg10');                                    //bar chart
    var svg20 = d3.select('#svg20');                                    //pie chart
    var svg30 = d3.select('#svg30');                                    //sort bar chart

    var width10 = +svg10.attr('width');                                 //width of bar chart
    var height10 = +svg10.attr('height');                               //height of bar chart
    var width20 = +svg20.attr('width');                                 //width of pie chart
    var height20 = +svg20.attr('height');                               //height of pie chart
    var width30 = +svg30.attr('width');                                 //width of sort bar chart
    var height30 = +svg30.attr('height');                               //height of sort bar chart

    var bar_margin = { top: 50, right: 50, bottom: 30, left: 50 };      //margin of bar chart
    var sortbar_margin = { top: 60, right: 30, bottom: 60, left: 150 }; //margin of sortbar chart

    var pie_item1 = "Local";                                            //show in pie chart
    var pie_item2 = "Global";                                               
    var pie_item3 = "Neither";                                              

    var bottomText = "Time Used";                                       //show in sort bar chart
    var topText = "Speed Ranking";


    //Add options into the selector
    for (let i = 1; i <= fileCount; i++){
        let option = "Round" + i;
        $('#RoundSelector').append(`<option value="${option}">${option} </option>`);
    }

    //Get what options that user selected and show the data based on that
    $("#RoundSelector").change(function (round) {


                 let options = $("#RoundSelector option:selected");
                 roundSelected = options.val() + ".json";

                 // Clear svg and show pie chart
                 if ($("#svg20").html() !== null) {
                       $("#svg20").html("");
                 }
                 PieInit(width20, height20, pie_item1, pie_item2, pie_item3, "/JData/" + roundSelected, "#svg20");

                 // Clear svg and show bar chart
                 if ($("#svg10").html() !== null) {
                       $("#svg10").html("");
                 }
                 BarInit(width10, height10, bar_margin, "/JData/" + roundSelected, "#svg10");

                 if ($("#svg30").html() !== null) {
                      $("#svg30").html("");
                 }
                 SortBar(width30, height30, sortbar_margin, bottomText, topText, "/JData/" + roundSelected, "#svg30");

                 console.log(roundSelected);
             });
 
    if (roundSelected === 0){
           roundSelected = "Round1";
    }
    var filename = "/JData/" + roundSelected + ".json";       // initial with Round1.json

    //initial pie chart
    PieInit(width20, height20, pie_item1, pie_item2, pie_item3, filename, "#svg20");

    function PieInit(width, height, pie_item1, pie_item2, pie_item3, filename, svg_id) {

        var pie_item1_count = 0;                                            //
        var pie_item2_count = 0;
        var pie_item3_count = 0;

        d3.json(filename, function (error, data10) {
            console.log("data10.length=" + data10.length);
            if (error) {
                throw error;
            }

            pie_item1_count = parseInt(data10.filter((res) => { return res.ImageType == pie_item1 }).length);
            pie_item2_count = parseInt(data10.filter((res) => { return res.ImageType == pie_item2 }).length);
            pie_item3_count = parseInt(data10.filter((res) => { return res.ImageType == pie_item3 }).length);
            console.log(pie_item1 + "=" + pie_item1_count + ", " + pie_item2 + "=" + pie_item2_count + ", " + pie_item3 + "=" + pie_item3_count);

            var dataset = [[pie_item1, pie_item1_count], [pie_item2, pie_item2_count], [pie_item3, pie_item3_count]];
            var pie = d3.pie()
                .sort(null)
                .value(function (d) {
                    return d[1];
                });
            var piedata = pie(dataset);

            var outerRadius10 = width / 5;
            var innerRadius10 = width / 20;

            var arc = d3.arc()
                .outerRadius(outerRadius10)
                .innerRadius(innerRadius10);

            var colors = d3.schemeCategory20;

            var svg_pie = d3.select(svg_id)
                .append('svg')
                .attr('width', width)
                .attr('height', height);

            var arcs = svg_pie.selectAll('g')
                .data(piedata)
                .enter()
                .append('g')
                .attr('transform', 'translate(' + (width / 2+10) + ',' + height / 2 + ')');

            arcs.append('path')
                .attr('fill', function (d, i) {
                    return colors[i];                  
                })
                .attr('d', function (d) {
                    return arc(d);
                });

            arcs.append('text')
                .attr('transform', function (d, i) {
                    var x10 = arc.centroid(d)[0] * 2.5;    
                    var y10 = arc.centroid(d)[1] * 2.5;    
                    if (i === 4) {
                        return 'translate(' + (x10 * 1.2) + ', ' + (y10 * 1.2) + ')';
                    } else if (i === 3) {
                        return 'translate(' + (x10 - 40) + ', ' + y10 + ')';
                    } else if (i === 5) {
                        return 'translate(' + (x10 + 40) + ', ' + y10 + ')';
                    }
                    return 'translate(' + x10 + ', ' + y10 + ')';
                })
                .attr('text-anchor', 'middle')
                .style("font-size", "16px")
                .attr("stroke", "blue")
                .text(function (d) {
                    var percent = Number(d.value) / d3.sum(dataset, function (d) {
                        return d[1];
                    }) * 100;
                    return d.data[0] + ' ' + percent.toFixed(1) + '%';
                })

            arcs.append('line')
                .attr('stroke', 'black')
                .attr('x1', function (d) { return arc.centroid(d)[0] * 1.65; })     
                .attr('y1', function (d) { return arc.centroid(d)[1] * 1.65; })    
                .attr('x2', function (d, i) {
                    if (i === 4) {
                        return arc.centroid(d)[0] * 3.2;
                    }
                    return arc.centroid(d)[0] * 2.5;
                })
                .attr('y2', function (d, i) {
                    if (i === 4) {
                        return arc.centroid(d)[1] * 3.2;
                    }
                    return arc.centroid(d)[1] * 2.5;
                });
        });
    }

    //initial bar chart
    BarInit(width10, height10, bar_margin, filename, "#svg10");

    function BarInit(width, height, margin, filename, svg_id) {

        var in_width = width - margin.left - margin.right;
        var in_height = height - margin.top - margin.bottom;

        d3.json(filename, function (error, data01) {
            if (error) throw error;

            data01.forEach(function (d) {
                d.Round = d.Round;
                d.TimeUse = +d.TimeUse;
            });

            // get X data
            var Xdatas = data01.map(function (d) {
                return d.Round;
            });

            // get Y data
            var values = data01.map(function (d) {
                return d.TimeUse;
            });

            // create xScale & yScale
            var xScale = d3.scaleBand().domain(Xdatas).rangeRound([0, in_width]).padding(0.1),
                yScale = d3.scaleLinear().domain([0, d3.max(values)]).rangeRound([in_height, 0]);

            var svg01 = d3.select(svg_id)
                .attr('width', in_width + margin.left + margin.right)
                .attr('height', in_height + margin.top + margin.bottom);

            // append group to svg
            var g = svg01.append('g')
                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

            // add X axis
            g.append('g')
                .attr('class', 'axisX')
                .attr('transform', 'translate(0,' + in_height + ')')
                .call(d3.axisBottom(xScale))
                .attr('font-weight', 'bold');

            // add Y axis
            g.append('g')
                .attr('class', 'axisY')
                .call(d3.axisLeft(yScale).ticks(10));

            // create chart for rect
            var chart = g.selectAll('.bar')
                .data(data01)
                .enter().append('g');

            // add rects
            chart.append('rect')
                .attr('class', 'bar')
                .attr('x', function (d) {
                    return xScale(d.Round);
                })
                //start animatoion
                .attr("y", function (d) {
                    var min = yScale.domain()[0];
                    return yScale(min);
                })
                .attr("height", function (d) {
                    return 0;
                })
                .transition()
                .delay(function (d, i) {
                    return i * 200;
                })
                .duration(2000)
                .ease(d3.easeBounceIn)

                //animation finish
                .attr('y', function (d) {
                    return yScale(d.TimeUse);
                })
                .attr('height', function (d) {
                    return in_height - yScale(d.TimeUse);
                })
                .attr('width', xScale.bandwidth());

            // add text to rects
            chart.append('text')
                .attr('class', 'barText')
                .attr('x', function (d) {
                    return xScale(d.Round);
                })
                //start animation
                .attr("y", function (d) {
                    var min = yScale.domain()[0];
                    return yScale(min);
                })
                .attr("height", function (d) {
                    return 0;
                })
                .transition()
                .delay(function (d, i) {
                    return i * 200;
                })
                .duration(1000)
                .ease(d3.easeBounceIn)

                //animation finish
                .attr('y', function (d) {
                    return yScale(d.TimeUse);
                })
                .attr('dx', xScale.bandwidth() / 2 + 10)        //+10 make text middle
                .attr('dy', 20)
                .attr('text-anchor', 'middle')
                .text(function (d) {
                    console.log("d.TimeUse", d.TimeUse)
                    return d.TimeUse;
                });

            // add mouseover event
            chart.on('mouseover', function (d) {
                d3.select(this).attr('opacity', 0.7);
            })
                .on('mouseout', function (d) {
                    d3.select(this)
                        .transition()
                        .duration(500)
                        .attr('opacity', 1)
                });
        });
    }

    //initial sortbar chart
    SortBar(width30, height30, sortbar_margin, bottomText, topText, filename, "#svg30");

    function SortBar(width, height, margin, bottomText, topText, filename, svg_id) {

        var in_width = width - margin.left - margin.right;
        var in_height = height - margin.top - margin.bottom;

        d3.json(filename, function (dataset) {
            dataset.forEach(datum => {
                datum.TimeUse = +(datum.TimeUse);
            });

            //Sort the dataset by ascending order
            dataset = dataset.sort((a, b) => {
                return d3.ascending(+a.TimeUse, +b.TimeUse)
            });

            //console.log(dataset);
            //console.log(dataset.map((datum) => { return datum.Round; }))

            //let x=TimeUse, y=Round
            var xValue = (datum) => { return datum.TimeUse };
            var yValue = (datum) => { return datum.Round };

            var xScale = d3.scaleLinear()
                .domain([0, d3.max(dataset, xValue)])
                .range([0, in_width]);

            var yScale = d3.scaleBand()
                .domain(dataset.map(yValue)) 
                .range([0, in_height])
                .padding(0.1);

            // append svg and transform to (left,top)
            var g = d3.select(svg_id).append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);

            // append rects  
            g.selectAll('rect')
                .data(dataset)
                .enter()
                .append('rect')
                .attr('y', datum => yScale(yValue(datum)))
                .attr('width', (datum) => { return xScale(xValue(datum)) })
                .attr('height', yScale.bandwidth())
                .attr('fill', 'steelblue')

            // X & Y axes;
            var yAxis = d3.axisLeft(yScale);
            var xAxis = d3.axisBottom(xScale)
                .tickFormat(d3.format(''))             //format('') show original number
                .tickSize(-in_height);

            let yAxisGroup = g.append('g').call(yAxis);
            yAxisGroup.selectAll('.domain, .tick line').remove();
            let xAxisGroup = g.append('g').call(xAxis)
                .attr('transform', `translate(${0}, ${in_height})`);

            xAxisGroup.append('text')
                .attr('y', 50)
                .attr('x', in_width / 2)
                .attr('fill', 'black').text(bottomText)
                .attr('id', 'TimeUse');

            xAxisGroup.selectAll('.domain').remove();

            //title in the top
            g.append('text')
                .text(topText)
                .attr('y', -10)
                .attr('x', 80);
        });
    }

</script>
